name: Daily ETL Report (HTML + JSON)

on:
  schedule:
    - cron: '5 15 * * *'   # ~23:05 Asia/Manila; adjust
  workflow_dispatch:

concurrency:
  group: daily-etl-report
  cancel-in-progress: true

jobs:
  run-and-save:
    environment: main                  # <-- your Environment name
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read

    env:
      # Secrets/vars from Environment: main
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_ACCOUNT: ${{ vars.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_DATABASE: ${{ vars.SNOWFLAKE_DATABASE }}
      SNOWFLAKE_SCHEMA: ${{ vars.SNOWFLAKE_SCHEMA }}           # optional; app default PUBLIC
      SNOWFLAKE_WAREHOUSE: ${{ vars.SNOWFLAKE_WAREHOUSE }}     # optional; app default COMPUTE_WH
      SNOWFLAKE_ROLE: ${{ vars.SNOWFLAKE_ROLE }}
      TZ: Asia/Manila
      SPRING_PROFILES_ACTIVE: prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image (DockerfileDeploy)
        run: docker build -t ph-shoes-etl:latest -f DockerfileDeploy .

      - name: Verify Snowflake driver packaged
        run: |
          CID=$(docker create ph-shoes-etl:latest)
          docker cp "$CID":/app/app.jar ./app.jar
          docker rm "$CID" >/dev/null
          jar tf app.jar | grep -q "net/snowflake/client/jdbc/SnowflakeDriver.class" || { echo "❌ JDBC driver missing"; exit 1; }

      - name: Start container (keep for logs)
        id: start
        run: |
          CID=$(docker run -d --name ph-shoes-etl -p 8080:8080 \
            -e SNOWFLAKE_USER \
            -e SNOWFLAKE_PASSWORD \
            -e SNOWFLAKE_ACCOUNT \
            -e SNOWFLAKE_DATABASE \
            -e SNOWFLAKE_SCHEMA \
            -e SNOWFLAKE_WAREHOUSE \
            -e SNOWFLAKE_ROLE \
            -e TZ \
            -e SPRING_PROFILES_ACTIVE \
            ph-shoes-etl:latest)
          echo "cid=$CID" >> $GITHUB_OUTPUT
          docker ps -a

      - name: First 200 log lines
        run: docker logs --tail=200 ph-shoes-etl || true

      - name: Wait for app
        id: wait
        shell: bash
        run: |
          set -e
          for i in {1..30}; do
            if ! docker ps --format '{{.Names}}' | grep -q '^ph-shoes-etl$'; then
              echo "Container exited early"; echo "ready=false" >> $GITHUB_OUTPUT; exit 1
            fi
            if curl -fsS "http://localhost:8080/reports/etl?timezone=Asia/Manila" >/dev/null; then
              echo "ready=true" >> $GITHUB_OUTPUT; exit 0
            fi
            echo "Waiting... ($i/30)"; sleep 3
          done
          echo "ready=false" >> $GITHUB_OUTPUT; exit 1
        continue-on-error: true

      - name: Logs on failure
        if: steps.wait.outputs.ready != 'true'
        run: |
          echo "==== docker ps -a ===="
          docker ps -a || true
          echo "==== container logs (last 500) ===="
          docker logs --tail=500 ph-shoes-etl || true
          exit 1

      - name: Download HTML + JSON
        if: steps.wait.outputs.ready == 'true'
        run: |
          TODAY=$(date +'%Y-%m-%d')
          curl -fsS "http://localhost:8080/reports/etl?timezone=Asia/Manila" -o "etl-report-${TODAY}.html"
          curl -fsS "http://localhost:8080/api/v1/etl-report?timezone=Asia/Manila" -o "etl-report-${TODAY}.json"
          ls -lh etl-report-*

      - name: Upload artifacts (7 days)
        if: steps.wait.outputs.ready == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: etl-report-${{ github.run_id }}
          path: |
            etl-report-*.html
            etl-report-*.json
          retention-days: 7

      - name: Stop & remove container
        if: always()
        run: |
          docker stop ph-shoes-etl || true
          docker rm ph-shoes-etl || true
